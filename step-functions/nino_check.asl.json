{
  "Comment": "A description of my state machine",
  "StartAt": "Invoke Check Session",
  "States": {
    "Invoke Check Session": {
      "Type": "Task",
      "Next": "Is Session Valid?",
      "Parameters": {
        "StateMachineArn": "${CheckSessionStateMachineArn}",
        "Input.$": "States.JsonToString($)"
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultSelector": {
        "sessionId.$": "$$.Execution.Input.sessionId",
        "nino.$": "$$.Execution.Input.nino",
        "sessionCheck.$": "States.StringToJson($.Output)"
      }
    },
    "Is Session Valid?": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.sessionCheck.status",
            "StringMatches": "SESSION_OK"
          },
          "Next": "Err: Invalid Session"
        }
      ],
      "Default": "Query User Attempts"
    },
    "Err: Invalid Session": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "httpStatus": 400
      }
    },
    "Query User Attempts": {
      "Type": "Task",
      "Next": "User has attempts?",
      "Parameters": {
        "TableName": "${UserAttemptsTable}",
        "KeyConditionExpression": "sessionId = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.check-attempts-exist"
    },
    "User has attempts?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-attempts-exist.Count",
          "NumericGreaterThan": 0,
          "Next": "User has more than 2 attempts?"
        }
      ],
      "Default": "Person Identity Table Name"
    },
    "User has more than 2 attempts?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-attempts-exist.Count",
          "NumericGreaterThanEquals": 2,
          "Next": "Err: Attempts exceeded"
        }
      ],
      "Default": "Person Identity Table Name"
    },
    "Err: Attempts exceeded": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "httpStatus": 200
      }
    },
    "Person Identity Table Name": {
      "Type": "Task",
      "Next": "Query Person Identity Table",
      "Parameters": {
        "Name": "/${CommonStackName}/PersonIdentityTableName"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      },
      "ResultPath": "$.personIdentityTableName"
    },
    "Query Person Identity Table": {
      "Type": "Task",
      "Next": "User Exists?",
      "Parameters": {
        "TableName.$": "$.personIdentityTableName.value",
        "KeyConditionExpression": "sessionId = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.userDetails"
    },
    "User Exists?": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.userDetails.Count",
              "NumericGreaterThan": 0
            },
            {
              "And": [
                {
                  "Variable": "$.userDetails.Items[0].names.L[0].M.nameParts.L[0].M.value.S",
                  "IsPresent": true
                },
                {
                  "Variable": "$.userDetails.Items[0].names.L[0].M.nameParts.L[1].M.value.S",
                  "IsPresent": true
                },
                {
                  "Variable": "$.userDetails.Items[0].birthDates.L[0].M.value.S",
                  "IsPresent": true
                }
              ]
            }
          ],
          "Next": "Get User Agent and API URL"
        }
      ],
      "Default": "Err: No user found in Person Identity"
    },
    "Get User Agent and API URL": {
      "Type": "Task",
      "Next": "Get OAuth Token",
      "Parameters": {
        "Names": ["${UserAgent}", "${NinoCheckUrl}"]
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameters",
      "ResultSelector": {
        "apiURL.$": "$.Parameters[0].Value",
        "userAgent.$": "$.Parameters[1].Value"
      },
      "ResultPath": "$.apiParams"
    },
    "Err: No user found in Person Identity": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "httpStatus": 500
      }
    },
    "Get OAuth Token": {
      "Type": "Task",
      "Next": "Filter out jargon",
      "Parameters": {
        "SecretId": "${BearerTokenName}"
      },
      "Resource": "arn:aws:states:::aws-sdk:secretsmanager:getSecretValue",
      "ResultPath": "$.oAuthToken",
      "ResultSelector": {
        "value.$": "$.SecretString"
      }
    },
    "Filter out jargon": {
      "Type": "Pass",
      "Next": "Call Matching API",
      "Parameters": {
        "sessionId.$": "$.sessionId",
        "nino.$": "$.nino",
        "userDetails": {
          "firstName.$": "$.userDetails.Items[0].names.L[0].M.nameParts.L[0].M.value.S",
          "lastName.$": "$.userDetails.Items[0].names.L[0].M.nameParts.L[1].M.value.S",
          "dob.$": "$.userDetails.Items[0].birthDates.L[0].M.value.S"
        },
        "userAgent.$": "$.apiParams.userAgent",
        "apiURL.$": "$.apiParams.apiURL",
        "oAuthToken.$": "$.oAuthToken.value"
      }
    },
    "Call Matching API": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${MatchingFunctionArn}"
      },
      "Next": "Successful match?",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "Err: Matching Lambda Exception"
        }
      ],
      "ResultSelector": {
        "payload.$": "$.Payload"
      },
      "ResultPath": "$.hmrc_response"
    },
    "Err: Matching Lambda Exception": {
      "Type": "Fail"
    },
    "Successful match?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.hmrc_response.payload.status",
          "StringEquals": "200",
          "Next": "Store Successful Attempt"
        }
      ],
      "Default": "Contains Error?"
    },
    "Store Successful Attempt": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${UserAttemptsTable}",
        "Item": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          },
          "timestamp": {
            "S.$": "$$.State.EnteredTime"
          },
          "status": {
            "N.$": "$.hmrc_response.payload.status"
          },
          "attempt": {
            "S": "PASS"
          }
        }
      },
      "Next": "Fetch Auth Code Expiry",
      "ResultPath": null
    },
    "Contains Error?": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.hmrc_response.payload.status",
              "StringEquals": "401"
            },
            {
              "Variable": "$.hmrc_response.payload.body.errors",
              "IsPresent": true
            }
          ],
          "Next": "Store Failed Match Attempt"
        },
        {
          "Variable": "$.hmrc_response.payload.body.code",
          "StringEquals": "INVALID_CREDENTIALS",
          "Next": "Err: Failed Auth"
        }
      ],
      "Default": "Err: API Error"
    },
    "Store Failed Match Attempt": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${UserAttemptsTable}",
        "Item": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          },
          "timestamp": {
            "S.$": "$$.State.EnteredTime"
          },
          "status": {
            "N.$": "$.hmrc_response.payload.status"
          },
          "text": {
            "S.$": "$.hmrc_response.payload.body.errors"
          },
          "attempt": {
            "S": "FAIL"
          }
        }
      },
      "Next": "Send Retry"
    },
    "Send Retry": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "httpStatus": 422
      }
    },
    "Fetch Auth Code Expiry": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${CreateAuthCodeFunctionArn}"
      },
      "Next": "Fetch Session Table Name",
      "ResultSelector": {
        "payload.$": "$.Payload"
      },
      "ResultPath": "$.expiry"
    },
    "Fetch Session Table Name": {
      "Type": "Task",
      "Next": "Set Auth Code for Session",
      "Parameters": {
        "Name": "/${CommonStackName}/SessionTableName"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      },
      "ResultPath": "$.sessionTable"
    },
    "Set Auth Code for Session": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName.$": "$.sessionTable.value",
        "Key": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          }
        },
        "UpdateExpression": "SET authorizationCode = :authCode, authorizationCodeExpiryDate = :expiry",
        "ExpressionAttributeValues": {
          ":authCode": {
            "S.$": "States.UUID()"
          },
          ":expiry": {
            "N.$": "States.Format('{}',$.expiry.payload.authCodeExpiry)"
          }
        }
      },
      "Next": "Save NINO & sessionId to nino-users table",
      "ResultPath": "$.setAuthCode"
    },
    "Save NINO & sessionId to nino-users table": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${NinoUsersTable}",
        "Item": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          },
          "nino": {
            "S.$": "$.hmrc_response.payload.body.nino"
          }
        }
      },
      "Next": "Response Filtering",
      "ResultPath": "$.saveUser"
    },
    "Response Filtering": {
      "Type": "Pass",
      "Next": "Nino check successful",
      "Parameters": {
        "httpStatus": 200
      }
    },
    "Nino check successful": {
      "Type": "Succeed"
    },
    "Err: API Error": {
      "Type": "Fail"
    },
    "Err: Failed Auth": {
      "Type": "Fail"
    }
  }
}
