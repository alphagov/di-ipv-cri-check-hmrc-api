{
  "Comment": "A description of my state machine",
  "StartAt": "Invoke Check Session",
  "States": {
    "Invoke Check Session": {
      "Type": "Task",
      "Next": "Is Session Valid?",
      "Parameters": {
        "StateMachineArn": "${CheckSessionStateMachineArn}",
        "Input.$": "States.JsonToString($)"
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultSelector": {
        "sessionId.$": "$$.Execution.Input.sessionId",
        "nino.$": "$$.Execution.Input.nino",
        "sessionCheck.$": "States.StringToJson($.Output)"
      }
    },
    "Is Session Valid?": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.sessionCheck.status",
            "StringMatches": "SESSION_OK"
          },
          "Next": "Err: Invalid Session"
        }
      ],
      "Default": "Query User Attempts"
    },
    "Err: Invalid Session": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "error": "Session is not valid or has expired"
      }
    },
    "Query User Attempts": {
      "Type": "Task",
      "Next": "User has attempts?",
      "Parameters": {
        "TableName": "${NinoAttemptsTable}",
        "KeyConditionExpression": "id = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.check-attempts-exist"
    },
    "User has attempts?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-attempts-exist.Count",
          "NumericGreaterThan": 0,
          "Next": "User has more than 2 attempts?"
        }
      ],
      "Default": "Create new user attempt"
    },
    "Create new user attempt": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${NinoAttemptsTable}",
        "Item": {
          "id": {
            "S.$": "$.sessionId"
          },
          "attempts": {
            "N": "0"
          },
          "outcome": {
            "S": "FAIL"
          }
        },
        "ConditionExpression": "attribute_not_exists(id)"
      },
      "Next": "Increment user attempt",
      "ResultPath": null
    },
    "User has more than 2 attempts?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.check-attempts-exist.Items[0].attempts.N",
          "StringGreaterThanEquals": "2",
          "Next": "Err: Attempts exceeded"
        }
      ],
      "Default": "Increment user attempt"
    },
    "Err: Attempts exceeded": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "error": "Maximum number of attempts exceeded"
      }
    },
    "Increment user attempt": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${NinoAttemptsTable}",
        "Key": {
          "id": {
            "S.$": "$.sessionId"
          }
        },
        "UpdateExpression": "ADD attempts :attempts",
        "ExpressionAttributeValues": {
          ":attempts": {
            "N": "1"
          }
        }
      },
      "Next": "Person Identity Table Name",
      "ResultPath": null
    },
    "Person Identity Table Name": {
      "Type": "Task",
      "Next": "Query Session",
      "Parameters": {
        "Name": "/${CommonStackName}/PersonIdentityTableName"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.personIdentityTableName"
    },
    "Query Session": {
      "Type": "Task",
      "Next": "User Exists?",
      "Parameters": {
        "TableName.$": "$.personIdentityTableName.Parameter.Value",
        "KeyConditionExpression": "sessionId = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.userDetails"
    },
    "User Exists?": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.userDetails.Count",
              "NumericGreaterThan": 0
            },
            {
              "And": [
                {
                  "Variable": "$.userDetails.Items[0].names.L[0].M.nameParts.L[0].M.value.S",
                  "IsPresent": true
                },
                {
                  "Variable": "$.userDetails.Items[0].names.L[0].M.nameParts.L[1].M.value.S",
                  "IsPresent": true
                },
                {
                  "Variable": "$.userDetails.Items[0].birthDates.L[0].M.value.S",
                  "IsPresent": true
                }
              ]
            }
          ],
          "Next": "Get User Agent and API URL"
        }
      ],
      "Default": "Err: No user for nino"
    },
    "Get User Agent and API URL": {
      "Type": "Task",
      "Next": "Get OAuth Token",
      "Parameters": {
        "Names": ["${UserAgent}", "${NinoCheckUrl}"]
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameters",
      "ResultPath": "$.apiParams"
    },
    "Err: No user for nino": {
      "Type": "Pass",
      "End": true,
      "Result": {
        "error": "No user found for given nino"
      },
      "Parameters": {
        "error": "No user for given nino found"
      }
    },
    "Get OAuth Token": {
      "Type": "Task",
      "Next": "Filter out jargon",
      "Parameters": {
        "SecretId": "${BearerTokenName}"
      },
      "Resource": "arn:aws:states:::aws-sdk:secretsmanager:getSecretValue",
      "ResultPath": "$.oAuthToken",
      "ResultSelector": {
        "value.$": "$.SecretString"
      }
    },
    "Filter out jargon": {
      "Type": "Pass",
      "Next": "Call Matching API",
      "Parameters": {
        "sessionId.$": "$.sessionId",
        "nino.$": "$.nino",
        "userDetails": {
          "firstName.$": "$.userDetails.Items[0].names.L[0].M.nameParts.L[0].M.value.S",
          "lastName.$": "$.userDetails.Items[0].names.L[0].M.nameParts.L[1].M.value.S",
          "dob.$": "$.userDetails.Items[0].birthDates.L[0].M.value.S"
        },
        "userAgent.$": "$.apiParams.Parameters[1].Value",
        "apiURL.$": "$.apiParams.Parameters[0].Value",
        "oAuthToken.$": "$.oAuthToken.value"
      }
    },
    "Call Matching API": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${MatchingFunctionArn}"
      },
      "Next": "Response Validation",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "Err: Matching Lambda Exception"
        }
      ],
      "ResultPath": "$.hmrc_response"
    },
    "Err: Matching Lambda Exception": {
      "Type": "Fail"
    },
    "Response Validation": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.hmrc_response.Payload.firstName",
              "IsPresent": true
            },
            {
              "Variable": "$.hmrc_response.Payload.lastName",
              "IsPresent": true
            },
            {
              "Variable": "$.hmrc_response.Payload.dateOfBirth",
              "IsPresent": true
            },
            {
              "Variable": "$.hmrc_response.Payload.nino",
              "IsPresent": true
            }
          ],
          "Next": "Update status to PASS"
        }
      ],
      "Default": "Contains Error?"
    },
    "Contains Error?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.hmrc_response.Payload.errors",
          "IsPresent": true,
          "Next": "Err: HMRC error"
        },
        {
          "Variable": "$.hmrc_response.Payload.message",
          "IsPresent": true,
          "Next": "Err: Failed Auth"
        }
      ],
      "Default": "Err: API Error"
    },
    "Err: HMRC error": {
      "Type": "Pass",
      "Parameters": {
        "error.$": "$.hmrc_response.Payload.errors"
      },
      "End": true
    },
    "Update status to PASS": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${NinoAttemptsTable}",
        "Key": {
          "id": {
            "S.$": "$$.Execution.Input.sessionId"
          }
        },
        "UpdateExpression": "SET outcome = :outcome",
        "ExpressionAttributeValues": {
          ":outcome": {
            "S": "PASS"
          }
        }
      },
      "Next": "Fetch Auth Code Expiry",
      "ResultPath": null
    },
    "Fetch Auth Code Expiry": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${CreateAuthCodeFunctionArn}"
      },
      "Next": "Fetch Session Table Name",
      "ResultPath": "$.expiry"
    },
    "Fetch Session Table Name": {
      "Type": "Task",
      "Next": "Set Auth Code for Session",
      "Parameters": {
        "Name": "/${CommonStackName}/SessionTableName"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.sessionTable"
    },
    "Set Auth Code for Session": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName.$": "$.sessionTable.Parameter.Value",
        "Key": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          }
        },
        "UpdateExpression": "SET authorizationCode = :authCode, authorizationCodeExpiryDate = :expiry",
        "ExpressionAttributeValues": {
          ":authCode": {
            "S.$": "States.UUID()"
          },
          ":expiry": {
            "N.$": "States.Format('{}',$.expiry.Payload.authCodeExpiry)"
          }
        }
      },
      "Next": "Save NINO & sessionId to nino-users table",
      "ResultPath": "$.setAuthCode"
    },
    "Save NINO & sessionId to nino-users table": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:putItem",
      "Parameters": {
        "TableName": "${NinoUsersTable}",
        "Item": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          },
          "nino": {
            "S.$": "$.hmrc_response.Payload.nino"
          }
        },
        "ConditionExpression": "attribute_not_exists(sessionId)"
      },
      "Next": "Response Filtering",
      "ResultPath": "$.saveUser",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "Err: Saving NINO"
        }
      ]
    },
    "Response Filtering": {
      "Type": "Pass",
      "Next": "Nino check successful",
      "Parameters": {}
    },
    "Err: Saving NINO": {
      "Type": "Fail",
      "CausePath": "$.Cause"
    },
    "Nino check successful": {
      "Type": "Succeed"
    },
    "Err: API Error": {
      "Type": "Fail",
      "CausePath": "$.hmrc_response.Payload"
    },
    "Err: Failed Auth": {
      "Type": "Fail",
      "CausePath": "$.hmrc_response.Payload.message"
    }
  }
}
