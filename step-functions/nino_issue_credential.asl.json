{
  "Comment": "A description of my state machine",
  "StartAt": "Fetch Session Table Name",
  "States": {
    "Fetch Session Table Name": {
      "Type": "Task",
      "Next": "Query Session Item",
      "Parameters": {
        "Name": "/${CommonStackName}/SessionTableName"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      },
      "ResultPath": "$.sessionTable"
    },
    "Query Session Item": {
      "Type": "Task",
      "Parameters": {
        "TableName.$": "$.sessionTable.value",
        "IndexName": "access-token-index",
        "KeyConditionExpression": "accessToken = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.bearerToken"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.querySessionResult",
      "Next": "Bearer Token Valid?"
    },
    "Bearer Token Valid?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.querySessionResult.Count",
          "NumericGreaterThan": 0,
          "Next": "Fetch Max JWT TTL"
        }
      ],
      "Default": "Err: Invalid Bearer Token"
    },
    "Fetch Max JWT TTL": {
      "Type": "Task",
      "Parameters": {
        "Name": "${MaxJwtTtlParameter}"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Fetch JWT TTL Unit",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      },
      "ResultPath": "$.MaxJwtTTL"
    },
    "Fetch JWT TTL Unit": {
      "Type": "Task",
      "Next": "Fetch VC KMS Signing Key",
      "Parameters": {
        "Name": "${JwtTtlUnitParameter}"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      },
      "ResultPath": "$.JwtTtlUnit"
    },
    "Fetch VC KMS Signing Key": {
      "Type": "Task",
      "Parameters": {
        "Name": "/${CommonStackName}/verifiableCredentialKmsSigningKeyId"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Fetch Issuer Value",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      },
      "ResultPath": "$.kid"
    },
    "Fetch Issuer Value": {
      "Type": "Task",
      "Next": "Fetch Person Identity Table Name",
      "Parameters": {
        "Name": "/${CommonStackName}/verifiableCredentialKmsSigningKeyId"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      },
      "ResultPath": "$.issuer"
    },
    "Fetch Person Identity Table Name": {
      "Type": "Task",
      "Next": "Filter Session Result",
      "Parameters": {
        "Name": "/${CommonStackName}/PersonIdentityTableName"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultSelector": {
        "value.$": "$.Parameter.Value"
      },
      "ResultPath": "$.personIdentityTableName"
    },
    "Filter Session Result": {
      "Type": "Pass",
      "Next": "Create Credential Subject And Evidence",
      "ResultPath": "$.querySession",
      "Parameters": {
        "sessionId.$": "$.querySessionResult.Items[0].sessionId.S",
        "subject.$": "$.querySessionResult.Items[0].subject.S"
      }
    },
    "Err: Invalid Bearer Token": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "error": "Invalid Bearer Token"
      }
    },
    "Create Credential Subject And Evidence": {
      "Type": "Parallel",
      "Next": "Create VC Claim Set",
      "Branches": [
        {
          "StartAt": "Fetch details from person identity",
          "States": {
            "Fetch details from person identity": {
              "Type": "Task",
              "Next": "Fetch Nino",
              "Parameters": {
                "TableName.$": "$.personIdentityTableName.value",
                "KeyConditionExpression": "sessionId = :value",
                "ExpressionAttributeValues": {
                  ":value": {
                    "S.$": "$.querySession.sessionId"
                  }
                }
              },
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
              "ResultPath": "$.userDetails"
            },
            "Fetch Nino": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:getItem",
              "Parameters": {
                "TableName": "${NinoUsersTable}",
                "Key": {
                  "sessionId": {
                    "S.$": "$.userDetails.Items[0].sessionId.S"
                  }
                }
              },
              "Next": "Create Credential Subject",
              "ResultPath": "$.nino"
            },
            "Create Credential Subject": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${CredentialSubjectFunctionArn}",
                "Payload": {
                  "userInfoEvent.$": "$.userDetails",
                  "nino.$": "$.nino.Item.nino.S"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": "$.credentialSubject",
              "End": true
            }
          }
        },
        {
          "StartAt": "Fetch exp time and NBF",
          "States": {
            "Fetch exp time and NBF": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${TimeFunctionArn}",
                "Payload": {
                  "ttlValue.$": "$.MaxJwtTTL.value",
                  "ttlUnit.$": "$.JwtTtlUnit.value"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": "$.time",
              "End": true
            }
          }
        },
        {
          "StartAt": "Fetch User NINO Attempts",
          "States": {
            "Fetch User NINO Attempts": {
              "Type": "Task",
              "Next": "Add Type to VC",
              "Parameters": {
                "TableName": "${UserAttemptsTable}",
                "KeyConditionExpression": "sessionId = :value",
                "ExpressionAttributeValues": {
                  ":value": {
                    "S.$": "$.querySession.sessionId"
                  }
                }
              },
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
              "ResultPath": "$.check-attempts-exist"
            },
            "Add Type to VC": {
              "Type": "Pass",
              "Next": "Did the user fail or pass the check?",
              "Parameters": {
                "type": ["VerifiableCredential", "IdentityCheckCredential"],
                "@context": [
                  "https://www.w3.org/2018/credentials/v1",
                  "https://vocab.london.cloudapps.digital/contexts/identity-v1.jsonld"
                ]
              },
              "ResultPath": "$.vctype"
            },
            "Did the user fail or pass the check?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Or": [
                    {
                      "Variable": "$.check-attempts-exist.Items[0].outcome.S",
                      "StringEquals": "FAIL"
                    }
                  ],
                  "Next": "Create Evidence (Failed)"
                }
              ],
              "Default": "Create Evidence (Pass)"
            },
            "Create Evidence (Failed)": {
              "Type": "Pass",
              "Parameters": {
                "evidence": [
                  {
                    "type": "IdentityCheck",
                    "txn.$": "States.UUID()",
                    "strengthScore": 2,
                    "validityScore": 0,
                    "failedCheckDetails": [
                      {
                        "checkMethod": "data"
                      }
                    ],
                    "ci": ["D02"]
                  }
                ]
              },
              "ResultPath": "$.vc",
              "Comment": "TODO: Check what the value of txn should be",
              "End": true
            },
            "Create Evidence (Pass)": {
              "Type": "Pass",
              "Parameters": {
                "evidence": [
                  {
                    "type": "IdentityCheck",
                    "txn.$": "States.UUID()",
                    "strengthScore": 2,
                    "validityScore": 2,
                    "checkDetails": [
                      {
                        "checkMethod": "data",
                        "identityCheckPolicy": "published"
                      }
                    ]
                  }
                ]
              },
              "ResultPath": "$.vc",
              "Comment": "TODO: Check what the value of txn should be",
              "End": true
            }
          }
        }
      ]
    },
    "Create VC Claim Set": {
      "Type": "Pass",
      "Next": "Base64 encode Header and Payload",
      "Parameters": {
        "header": {
          "kid.$": "$[0].kid.value",
          "typ": "JWT",
          "alg": "ES256"
        },
        "payload": {
          "jti.$": "States.Format('urn:uuid:{}',States.UUID())",
          "sub.$": "$[0].querySession.subject",
          "iss.$": "$[0].issuer.value",
          "nbf.$": "$[1].time.Payload.nbf",
          "exp.$": "$[1].time.Payload.expiry",
          "vc": {
            "type.$": "$[2].vctype.type",
            "@context.$": "$[2].vctype.@context",
            "credentialSubject.$": "$[0].credentialSubject.Payload",
            "evidence.$": "$[2].vc.evidence"
          }
        }
      }
    },
    "Base64 encode Header and Payload": {
      "Type": "Pass",
      "Next": "Sign VC claimsSet",
      "Parameters": {
        "header.$": "States.Base64Encode(States.JsonToString($.header))",
        "payload.$": "States.Base64Encode(States.JsonToString($.payload))"
      },
      "ResultPath": "$.encoded"
    },
    "Sign VC claimsSet": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "kid.$": "$.header.kid",
          "header.$": "$.encoded.header",
          "claimsSet.$": "$.encoded.payload"
        },
        "FunctionName": "${JwtSignerFunction}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Create Signed JWT",
      "ResultPath": "$.signature"
    },
    "Create Signed JWT": {
      "Type": "Pass",
      "Parameters": {
        "jwt.$": "States.Format('{}.{}.{}', $.encoded.header, $.encoded.payload, States.Base64Encode($.signature.Payload))"
      },
      "End": true
    }
  }
}
