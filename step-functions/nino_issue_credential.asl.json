{
  "Comment": "A description of my state machine",
  "StartAt": "Fetch SSM Parameters",
  "States": {
    "Fetch SSM Parameters": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${SsmParametersFunction}",
        "Payload": {
          "parameters.$": "States.Array('/${CommonStackName}/SessionTableName','${MaxJwtTtlParameter}','${JwtTtlUnitParameter}','/${CommonStackName}/verifiableCredentialKmsSigningKeyId','/${CommonStackName}/PersonIdentityTableName','/check-hmrc-cri-api/contraindicationMappings','/${CommonStackName}/verifiable-credential/issuer')"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Query Session Item",
      "ResultPath": "$.parameters",
      "ResultSelector": {
        "SessionTableName.$": "$.Payload[0].Value",
        "MaxJwtTtl.$": "$.Payload[1].Value",
        "JwtTtlUnit.$": "$.Payload[2].Value",
        "verifiableCredentialKmsSigningKeyId.$": "$.Payload[3].Value",
        "PersonIdentityTableName.$": "$.Payload[4].Value",
        "contraindicationMappings.$": "$.Payload[5].Value",
        "issuer.$": "$.Payload[6].Value"
      }
    },
    "Query Session Item": {
      "Type": "Task",
      "Parameters": {
        "TableName.$": "$.parameters.SessionTableName",
        "IndexName": "access-token-index-with-event-data",
        "KeyConditionExpression": "accessToken = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.bearerToken"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.querySessionResult",
      "Next": "Bearer Token Valid?"
    },
    "Bearer Token Valid?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.querySessionResult.Count",
          "NumericGreaterThan": 0,
          "Next": "Filter Session Result"
        }
      ],
      "Default": "Err: Invalid Bearer Token"
    },
    "Filter Session Result": {
      "Type": "Pass",
      "Next": "Create Credential Subject And Evidence",
      "ResultPath": "$.session",
      "Parameters": {
        "id.$": "$.querySessionResult.Items[0].sessionId.S",
        "persistentId.$": "$.querySessionResult.Items[0].persistentSessionId.S",
        "journeyId.$": "$.querySessionResult.Items[0].clientSessionId.S",
        "subject.$": "$.querySessionResult.Items[0].subject.S",
        "ipAddress.$": "$.querySessionResult.Items[0].clientIpAddress.S"
      }
    },
    "Err: Invalid Bearer Token": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "error": "Invalid Bearer Token",
        "httpStatus": 400
      }
    },
    "Create Credential Subject And Evidence": {
      "Type": "Parallel",
      "Next": "Sign VC claimsSet",
      "Branches": [
        {
          "StartAt": "Fetch details from person identity",
          "States": {
            "Fetch details from person identity": {
              "Type": "Task",
              "Next": "Fetch Nino",
              "Parameters": {
                "TableName.$": "$.personIdentityTableName",
                "KeyConditionExpression": "sessionId = :value",
                "ExpressionAttributeValues": {
                  ":value": {
                    "S.$": "$.sessionId"
                  }
                }
              },
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
              "ResultPath": "$.userInfoEvent"
            },
            "Fetch Nino": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:getItem",
              "Parameters": {
                "TableName": "${NinoUsersTable}",
                "Key": {
                  "sessionId": {
                    "S.$": "$.sessionId"
                  }
                }
              },
              "Next": "Create Credential Subject",
              "ResultPath": "$.nino",
              "ResultSelector": {
                "value.$": "$.Item.nino.S"
              }
            },
            "Create Credential Subject": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${CredentialSubjectFunctionArn}",
                "Payload": {
                  "userInfoEvent.$": "$.userInfoEvent",
                  "nino.$": "$.nino.value"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true,
              "ResultSelector": {
                "credentialSubject.$": "$.Payload"
              }
            }
          }
        },
        {
          "StartAt": "Fetch exp time and NBF",
          "States": {
            "Fetch exp time and NBF": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${TimeFunctionArn}",
                "Payload": {
                  "ttlValue.$": "$.maxJwtTtl",
                  "ttlUnit.$": "$.jwtTtlUnit"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true,
              "ResultSelector": {
                "time.$": "$.Payload"
              }
            }
          }
        },
        {
          "StartAt": "Fetch Failed Attempts",
          "States": {
            "Fetch Failed Attempts": {
              "Type": "Task",
              "Next": "Add Type to VC",
              "Parameters": {
                "TableName": "${UserAttemptsTable}",
                "KeyConditionExpression": "sessionId = :value",
                "FilterExpression": "attempt = :attempt",
                "ExpressionAttributeValues": {
                  ":value": {
                    "S.$": "$.sessionId"
                  },
                  ":attempt": {
                    "S": "FAIL"
                  }
                }
              },
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
              "ResultSelector": {
                "count.$": "$.Count",
                "items.$": "$.Items"
              },
              "ResultPath": "$.failedAttempts"
            },
            "Add Type to VC": {
              "Type": "Pass",
              "Next": "Did the user fail or pass the check?",
              "ResultPath": "$.vctype",
              "Result": {
                "type": [
                  "VerifiableCredential",
                  "IdentityCheckCredential"
                ],
                "@context": [
                  "https://www.w3.org/2018/credentials/v1",
                  "https://vocab.london.cloudapps.digital/contexts/identity-v1.jsonld"
                ]
              },
              "Parameters": {
                "sessionId.$": "$.sessionId",
                "contraindicationMappings.$": "$.contraindicationMappings",
                "failedAttempts.$": "$.failedAttempts"
              }
            },
            "Did the user fail or pass the check?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.failedAttempts.count",
                  "NumericGreaterThanEquals": 2,
                  "Next": "Fetch CI"
                }
              ],
              "Default": "Create Evidence (Pass)"
            },
            "Fetch CI": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${CiMappingFunctionArn}",
                "Payload": {
                  "ci_mapping.$": "States.StringSplit($.contraindicationMappings,'||')",
                  "hmrc_errors.$": "$.failedAttempts.items[*].text.S"
                }
              },
              "Next": "Create Evidence (Failed)",
              "ResultSelector": {
                "value.$": "$.Payload"
              },
              "ResultPath": "$.ci"
            },
            "Create Evidence (Failed)": {
              "Type": "Pass",
              "Parameters": {
                "evidence": [
                  {
                    "type": "IdentityCheck",
                    "txn.$": "States.UUID()",
                    "strengthScore": 2,
                    "validityScore": 0,
                    "failedCheckDetails": [
                      {
                        "checkMethod": "data"
                      }
                    ],
                    "ci.$": "$.ci.value"
                  }
                ]
              },
              "ResultPath": "$.vc",
              "End": true
            },
            "Create Evidence (Pass)": {
              "Type": "Pass",
              "Parameters": {
                "evidence": [
                  {
                    "type": "IdentityCheck",
                    "txn.$": "States.UUID()",
                    "strengthScore": 2,
                    "validityScore": 2,
                    "checkDetails": [
                      {
                        "checkMethod": "data"
                      }
                    ]
                  }
                ]
              },
              "ResultPath": "$.vc",
              "End": true
            }
          }
        },
        {
          "StartAt": "Original Input",
          "States": {
            "Original Input": {
              "Type": "Pass",
              "End": true,
              "ResultPath": null
            }
          }
        }
      ],
      "ResultSelector": {
        "header": {
          "kid.$": "$[3].kid",
          "typ": "JWT",
          "alg": "ES256"
        },
        "payload": {
          "jti.$": "States.Format('urn:uuid:{}',States.UUID())",
          "sub.$": "$[3].sub",
          "iss.$": "$[3].iss",
          "nbf.$": "$[1].time.nbf",
          "exp.$": "$[1].time.expiry",
          "vc": {
            "type.$": "$[2].vctype.type",
            "@context.$": "$[2].vctype.@context",
            "credentialSubject.$": "$[0].credentialSubject",
            "evidence.$": "$[2].vc.evidence"
          }
        }
      },
      "Parameters": {
        "sessionId.$": "$.session.id",
        "personIdentityTableName.$": "$.parameters.PersonIdentityTableName",
        "maxJwtTtl.$": "$.parameters.MaxJwtTtl",
        "jwtTtlUnit.$": "$.parameters.JwtTtlUnit",
        "contraindicationMappings.$": "$.parameters.contraindicationMappings",
        "iss.$": "$.parameters.issuer",
        "kid.$": "$.parameters.verifiableCredentialKmsSigningKeyId",
        "sub.$": "$.session.subject"
      },
      "ResultPath": "$.vcClaimSetRaw"
    },
    "Sign VC claimsSet": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "kid.$": "$.vcClaimSetRaw.header.kid",
          "header.$": "States.JsonToString($.vcClaimSetRaw.header)",
          "claimsSet.$": "States.JsonToString($.vcClaimSetRaw.payload)"
        },
        "FunctionName": "${JwtSignerFunction}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Fetch Current Time For VC Issued Event",
      "ResultSelector": {
        "value.$": "$.Payload"
      },
      "ResultPath": "$.vcClaimSetSignature"
    },
    "Fetch Current Time For VC Issued Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${CurrentTimeFunctionArn}"
      },
      "Next": "Publish Audit Event VC Issued",
      "ResultSelector": {
        "milliseconds.$": "$.Payload.milliseconds",
        "seconds.$": "$.Payload.seconds"
      },
      "ResultPath": "$.currentTime"
    },
    "Publish Audit Event VC Issued": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "msTimestamp.$": "$.currentTime.milliseconds",
              "sTimestamp.$": "$.currentTime.seconds",
              "session.$": "$.session",
              "issuer.$": "$.parameters.issuer"
            },
            "DetailType": "${AuditEventNameVcIssued}",
            "EventBusName": "${CheckHmrcEventBus}",
            "Source": "${CheckHmrcEventBusSource}"
          }
        ]
      },
      "Next": "Create Signed JWT",
      "ResultPath": null
    },
    "Create Signed JWT": {
      "Type": "Pass",
      "Next": "Fetch Current Time For End Event",
      "Parameters": {
        "jwt.$": "$.jwt.Payload",
        "httpStatus": 200
      },
      "ResultPath": "$.vcClaimSetSignature.value"
    },
    "Fetch Current Time For End Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${CurrentTimeFunctionArn}"
      },
      "Next": "Publish Audit Event End",
      "ResultSelector": {
        "milliseconds.$": "$.Payload.milliseconds",
        "seconds.$": "$.Payload.seconds"
      },
      "ResultPath": "$.currentTime"
    },
    "Publish Audit Event End": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "msTimestamp.$": "$.currentTime.milliseconds",
              "sTimestamp.$": "$.currentTime.seconds",
              "session.$": "$.session",
              "issuer.$": "$.parameters.issuer"
            },
            "DetailType": "${AuditEventNameEnd}",
            "EventBusName": "${CheckHmrcEventBus}",
            "Source": "${CheckHmrcEventBusSource}"
          }
        ]
      },
      "End": true,
      "OutputPath": "$.jwt",
      "ResultPath": null
    }
  }
}