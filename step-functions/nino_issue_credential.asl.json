{
  "Comment": "A description of my state machine",
  "StartAt": "Check Bearer Token Present",
  "States": {
    "Check Bearer Token Present": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.bearerToken",
          "IsPresent": false,
          "Next": "Error: Invalid Bearer Token"
        }
      ],
      "Default": "Validate Bearer Token"
    },
    "Validate Bearer Token": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.bearerToken",
          "IsPresent": false,
          "Next": "Error: No access code"
        }
      ],
      "Default": "Fetch Session Table Name"
    },
    "Fetch Max JWT TTL": {
      "Type": "Task",
      "Parameters": {
        "Name": "${MaxJwtTtlParameter}"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Fetch JWT TTL Unit",
      "ResultPath": "$.MaxJwtTTL"
    },
    "Fetch JWT TTL Unit": {
      "Type": "Task",
      "Next": "Fetch VC Issuer",
      "Parameters": {
        "Name": "${JwtTtlUnitParameter}"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.jwtTTLUnit"
    },
    "Fetch VC Issuer": {
      "Type": "Task",
      "Parameters": {
        "Name": "/common-cri-api/verifiable-credential/issuer"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Fetch VC KMS Signing Key",
      "ResultPath": "$.vc_issuer"
    },
    "Fetch VC KMS Signing Key": {
      "Type": "Task",
      "Parameters": {
        "Name": "/common-cri-api/verifiableCredentialKmsSigningKeyId"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "Next": "Fetch details from person identity",
      "ResultPath": "$.kmsSigningKeyId"
    },
    "Fetch Session Table Name": {
      "Type": "Task",
      "Next": "Query Session Item",
      "Parameters": {
        "Name": "/common-cri-api/SessionTableName"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.sessionTable"
    },
    "Fetch Person Identity Table Name": {
      "Type": "Task",
      "Next": "Fetch Max JWT TTL",
      "Parameters": {
        "Name": "/common-cri-api/PersonIdentityTableName"
      },
      "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
      "ResultPath": "$.personIdentityTableName"
    },
    "Query Session Item": {
      "Type": "Task",
      "Parameters": {
        "TableName.$": "$.sessionTable.Parameter.Value",
        "IndexName": "access-token-index",
        "KeyConditionExpression": "accessToken = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.bearerToken"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "Next": "Fetch Person Identity Table Name",
      "ResultPath": "$.querySession"
    },
    "Fetch details from person identity": {
      "Type": "Task",
      "Next": "Map",
      "Parameters": {
        "TableName.$": "$.personIdentityTableName.Parameter.Value",
        "KeyConditionExpression": "sessionId = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.querySession.Items[0].sessionId.S"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.userDetails"
    },
    "Map": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "ExtractData",
        "States": {
          "ExtractData": {
            "Type": "Pass",
            "End": true,
            "Parameters": {
              "value.$": "$.M.value.S",
              "type.$": "$.M.type.S"
            }
          }
        }
      },
      "Next": "Create VC Structure",
      "ItemsPath": "$.userDetails.Items[0].names.L[0].M.nameParts.L",
      "InputPath": "$",
      "ResultPath": "$.map"
    },
    "Create VC Structure": {
      "Type": "Pass",
      "Next": "Fetch User NINO Attempts",
      "Parameters": {
        "credentialSubject": {
          "name": [
            {
              "nameParts.$": "$.map"
            }
          ],
          "socialSecurityRecord": [
            {
              "personalNumber.$": "$.userDetails.Items[0].nino.S"
            }
          ]
        },
        "kid.$": "$.kmsSigningKeyId.Parameter.Value",
        "sessionId.$": "$.querySession.Items[0].sessionId.S"
      }
    },
    "Fetch User NINO Attempts": {
      "Type": "Task",
      "Next": "Did the user fail or pass the check?",
      "Parameters": {
        "TableName": "${NinoAttemptsTable}",
        "KeyConditionExpression": "id = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.sessionId"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
      "ResultPath": "$.check-attempts-exist"
    },
    "Did the user fail or pass the check?": {
      "Type": "Choice",
      "Choices": [
        {
          "Or": [
            {
              "Not": {
                "Variable": "$.check-attempts-exist.Items[0].outcome.S",
                "StringEquals": "PASS"
              }
            }
          ],
          "Next": "Create VC Claim Set (Failed)"
        }
      ],
      "Default": "Create VC Claim Set (Pass)"
    },
    "Create VC Claim Set (Failed)": {
      "Type": "Pass",
      "Next": "Create JWT Header",
      "Parameters": {
        "type": ["VerifiableCredential", "IdentityCheckCredential"],
        "evidence": [
          {
            "type": "IdentityCheck",
            "txn.$": "States.UUID()",
            "strengthScore": 2,
            "validityScore": 0,
            "failedCheckDetails": [
              {
                "checkMethod": "data"
              }
            ],
            "ci": ["D02"]
          }
        ]
      },
      "ResultPath": "$.vc_claimset",
      "Comment": "TODO: Check what the value of txn should be"
    },
    "Create VC Claim Set (Pass)": {
      "Type": "Pass",
      "Next": "Create JWT Header",
      "Parameters": {
        "type": ["VerifiableCredential", "IdentityCheckCredential"],
        "evidence": [
          {
            "type": "IdentityCheck",
            "txn.$": "States.UUID()",
            "strengthScore": 2,
            "validityScore": 2,
            "checkDetails": [
              {
                "checkMethod": "data",
                "identityCheckPolicy": "published"
              }
            ]
          }
        ]
      },
      "ResultPath": "$.vc_claimset",
      "Comment": "TODO: Check what the value of txn should be"
    },
    "Create JWT Header": {
      "Type": "Pass",
      "Next": "Format",
      "Parameters": {
        "kid.$": "$.kid",
        "typ": "JWT",
        "alg": "ES256"
      },
      "ResultPath": "$.header"
    },
    "Format": {
      "Type": "Pass",
      "Next": "Base64 and Combine JWT Header and Payload",
      "Parameters": {
        "header.$": "$.header",
        "payload": {
          "credentialSubject.$": "$.credentialSubject",
          "type.$": "$.vc_claimset.type",
          "evidence.$": "$.vc_claimset.evidence"
        }
      }
    },
    "Base64 and Combine JWT Header and Payload": {
      "Type": "Pass",
      "Next": "Sign VC claimset",
      "Parameters": {
        "header.$": "States.Base64Encode(States.JsonToString($.header))",
        "payload.$": "States.Base64Encode(States.JsonToString($.payload))",
        "kid.$": "$.header.kid"
      }
    },
    "Sign VC claimset": {
      "Type": "Task",
      "Next": "Create Signed JWT",
      "Parameters": {
        "KeyId.$": "$.kid",
        "Message.$": "States.Format('{}.{}', $.header,$.payload)",
        "SigningAlgorithm": "ECDSA_SHA_256"
      },
      "Resource": "arn:aws:states:::aws-sdk:kms:sign",
      "ResultPath": "$.sign"
    },
    "Create Signed JWT": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "jwt.$": "States.Format('{}.{}.{}', $.header, $.payload, States.Base64Encode($.sign.Signature))"
      }
    },
    "Error: No access code": {
      "Type": "Pass",
      "End": true
    },
    "Error: Invalid Bearer Token": {
      "Type": "Pass",
      "End": true
    }
  }
}
