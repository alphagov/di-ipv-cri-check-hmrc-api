{
  "Comment": "A description of my state machine",
  "StartAt": "Query Session Item",
  "States": {
    "Query Session Item": {
      "Type": "Task",
      "Parameters": {
        "TableName": "session-${CommonStackName}",
        "FilterExpression": "accessToken = :value",
        "ExpressionAttributeValues": {
          ":value": {
            "S.$": "$.bearerToken"
          }
        }
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:scan",
      "ResultPath": "$.querySessionResult",
      "Next": "Bearer Token Valid?"
    },
    "Bearer Token Valid?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.querySessionResult.Count",
          "NumericGreaterThan": 0,
          "Next": "Is Persistent Id Present?"
        }
      ],
      "Default": "Err: Invalid Bearer Token"
    },
    "Is Persistent Id Present?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.querySessionResult.Items[0].persistentSessionId",
          "IsPresent": true,
          "Next": "Get Audit UserInfo With Persistent Id"
        }
      ],
      "Default": "Get Audit UserInfo"
    },
    "Get Audit UserInfo": {
      "Type": "Pass",
      "Parameters": {
        "govuk_signin_journey_id.$": "$.querySessionResult.Items[0].clientSessionId.S",
        "ip_address.$": "$.querySessionResult.Items[0].clientIpAddress.S",
        "session_id.$": "$.querySessionResult.Items[0].sessionId.S",
        "user_id.$": "$.querySessionResult.Items[0].subject.S"
      },
      "ResultPath": "$.userAuditInfo",
      "Next": "Fetch SSM Parameters"
    },
    "Get Audit UserInfo With Persistent Id": {
      "Type": "Pass",
      "Parameters": {
        "govuk_signin_journey_id.$": "$.querySessionResult.Items[0].clientSessionId.S",
        "ip_address.$": "$.querySessionResult.Items[0].clientIpAddress.S",
        "persistent_session_id.$": "$.querySessionResult.Items[0].persistentSessionId.S",
        "session_id.$": "$.querySessionResult.Items[0].sessionId.S",
        "user_id.$": "$.querySessionResult.Items[0].subject.S"
      },
      "ResultPath": "$.userAuditInfo",
      "Next": "Fetch SSM Parameters"
    },
    "Fetch SSM Parameters": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${SsmParametersFunction}",
        "Payload": {
          "parameters.$": "States.Array('${MaxJwtTtlParameter}','${JwtTtlUnitParameter}','/${CommonStackName}/verifiableCredentialKmsSigningKeyId','/${CommonStackName}/PersonIdentityTableName','/check-hmrc-cri-api/contraindicationMappings','/${CommonStackName}/verifiable-credential/issuer', '/check-hmrc-cri-api/contraIndicatorReasonsMapping')",
          "govJourneyId.$": "$.querySessionResult.Items[0].clientSessionId.S"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Filter Session Result",
      "ResultPath": "$.parameters",
      "ResultSelector": {
        "MaxJwtTtl.$": "$.Payload[0].Value",
        "JwtTtlUnit.$": "$.Payload[1].Value",
        "verifiableCredentialKmsSigningKeyId.$": "$.Payload[2].Value",
        "PersonIdentityTableName.$": "$.Payload[3].Value",
        "contraindicationMappings.$": "$.Payload[4].Value",
        "issuer.$": "$.Payload[5].Value",
        "contraindicatorReasonMappings.$": "$.Payload[6].Value"
      }
    },
    "Filter Session Result": {
      "Type": "Pass",
      "Next": "Create Credential Subject And Evidence",
      "ResultPath": "$.querySession",
      "Parameters": {
        "sessionId.$": "$.querySessionResult.Items[0].sessionId.S",
        "subject.$": "$.querySessionResult.Items[0].subject.S",
        "userAuditInfo.$": "$.userAuditInfo"
      }
    },
    "Err: Invalid Bearer Token": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "error": "Invalid Bearer Token",
        "httpStatus": 400
      }
    },
    "Create Credential Subject And Evidence": {
      "Type": "Parallel",
      "Next": "Create VC Claim Set",
      "Branches": [
        {
          "StartAt": "Fetch details from person identity",
          "States": {
            "Fetch details from person identity": {
              "Type": "Task",
              "Next": "Fetch Nino",
              "Parameters": {
                "TableName.$": "$.parameters.PersonIdentityTableName",
                "KeyConditionExpression": "sessionId = :value",
                "ExpressionAttributeValues": {
                  ":value": {
                    "S.$": "$.querySession.sessionId"
                  }
                }
              },
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
              "ResultPath": "$.userDetails"
            },
            "Fetch Nino": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:getItem",
              "Parameters": {
                "TableName": "${NinoUsersTable}",
                "Key": {
                  "sessionId": {
                    "S.$": "$.userDetails.Items[0].sessionId.S"
                  }
                }
              },
              "Next": "Create Credential Subject",
              "ResultPath": "$.nino"
            },
            "Create Credential Subject": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${CredentialSubjectFunctionArn}",
                "Payload": {
                  "userInfoEvent.$": "$.userDetails",
                  "nino.$": "$.nino.Item.nino.S",
                  "govJourneyId.$": "$.querySessionResult.Items[0].clientSessionId.S"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "ResultSelector": {
                "Payload.$": "$.Payload"
              },
              "ResultPath": "$.credentialSubject",
              "End": true
            }
          }
        },
        {
          "StartAt": "Fetch exp time and NBF",
          "States": {
            "Fetch exp time and NBF": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${TimeFunctionArn}",
                "Payload": {
                  "ttlValue.$": "$.parameters.MaxJwtTtl",
                  "ttlUnit.$": "$.parameters.JwtTtlUnit"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "ResultPath": "$.time",
              "End": true
            }
          }
        },
        {
          "StartAt": "Fetch Failed Attempts",
          "States": {
            "Fetch Failed Attempts": {
              "Type": "Task",
              "Next": "Add Type to VC",
              "Parameters": {
                "TableName": "${UserAttemptsTable}",
                "KeyConditionExpression": "sessionId = :value",
                "ExpressionAttributeValues": {
                  ":value": {
                    "S.$": "$.querySession.sessionId"
                  }
                }
              },
              "ResultSelector": {
                "FailureItems.$": "$.Items[?(@.attempt.S==FAIL)]",
                "FailureCount.$": "States.ArrayLength($.Items[?(@.attempt.S==FAIL)])",
                "SuccessCount.$": "States.ArrayLength($.Items[?(@.attempt.S==PASS)])"
              },
              "Resource": "arn:aws:states:::aws-sdk:dynamodb:query",
              "ResultPath": "$.attempts"
            },
            "Add Type to VC": {
              "Type": "Pass",
              "Next": "Did the user fail or pass the check?",
              "Parameters": {
                "type": [
                  "VerifiableCredential",
                  "IdentityCheckCredential"
                ],
                "@context": [
                  "https://www.w3.org/2018/credentials/v1",
                  "https://vocab.london.cloudapps.digital/contexts/identity-v1.jsonld"
                ]
              },
              "ResultPath": "$.vctype"
            },
            "Did the user fail or pass the check?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Or": [
                    {
                      "Variable": "$.attempts.FailureCount",
                      "NumericGreaterThanEquals": 2
                    }
                  ],
                  "Next": "Fetch CI"
                }
              ],
              "Default": "Evidence Requested ?"
            },
            "Evidence Requested ?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.querySessionResult.Items[0].evidenceRequest",
                  "IsPresent": true,
                  "Next": "create VC evidence of pass"
                }
              ],
              "Default": "create VC evidence of pass without scores"
            },
            "create VC evidence of pass": {
              "Type": "Pass",
              "Parameters": {
                "type": "IdentityCheck",
                "txn.$": "$.querySessionResult.Items[0].txn.S",
                "strengthScore": 2,
                "validityScore": 2,
                "checkDetails": [
                  {
                    "checkMethod": "data"
                  }
                ]
              },
              "ResultPath": "$.evidence",
              "Next": "create Audit evidence of a pass"
            },
            "Fetch CI": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${CiMappingFunctionArn}",
                "Payload": {
                  "contraIndicationMapping.$": "States.StringSplit($.parameters.contraindicationMappings,'||')",
                  "hmrcErrors.$": "$.attempts.FailureItems[*].text.S",
                  "contraIndicatorReasonsMapping.$": "States.StringToJson($.parameters.contraindicatorReasonMappings)",
                  "govJourneyId.$": "$.querySessionResult.Items[0].clientSessionId.S"
                }
              },
              "ResultPath": "$.contraIndicators",
              "Next": "Evidence Requested?"
            },
            "Evidence Requested?": {
              "Type": "Choice",
              "Choices": [
                {
                  "And": [
                    {
                      "Variable": "$.querySessionResult.Items[0].evidenceRequest",
                      "IsPresent": true
                    }
                  ],
                  "Next": "create VC evidence of a failure"
                }
              ],
              "Default": "create VC evidence without CI of a failure"
            },
            "create VC evidence of a failure": {
              "Type": "Pass",
              "Next": "create Audit evidence of a failure",
              "Parameters": {
                "type": "IdentityCheck",
                "txn.$": "$.querySessionResult.Items[0].txn.S",
                "strengthScore": 2,
                "validityScore": 0,
                "failedCheckDetails": [
                  {
                    "checkMethod": "data"
                  }
                ],
                "ci.$": "States.ArrayUnique($.contraIndicators.Payload[*].ci)"
              },
              "ResultPath": "$.evidence"
            },
            "create VC evidence of pass without scores": {
              "Type": "Pass",
              "Parameters": {
                "type": "IdentityCheck",
                "txn.$": "$.querySessionResult.Items[0].txn.S",
                "checkDetails": [
                  {
                    "checkMethod": "data",
                    "dataCheck": "record_check"
                  }
                ]
              },
              "ResultPath": "$.evidence",
              "Next": "create Audit evidence of a pass"
            },
            "create Audit evidence of a pass": {
              "Type": "Pass",
              "Parameters": {
                "evidence.$": "States.JsonMerge($.evidence, States.StringToJson(States.Format('\\{\"attemptNum\": {}\\}', $.attempts.SuccessCount)), false)"
              },
              "ResultPath": "$.audit",
              "End": true
            },
            "create VC evidence without CI of a failure": {
              "Type": "Pass",
              "Parameters": {
                "type": "IdentityCheck",
                "txn.$": "$.querySessionResult.Items[0].txn.S",
                "failedCheckDetails": [
                  {
                    "checkMethod": "data",
                    "dataCheck": "record_check"
                  }
                ]
              },
              "Next": "create Audit evidence of a failure",
              "ResultPath": "$.evidence"
            },
            "create Audit evidence of a failure": {
              "Type": "Pass",
              "Parameters": {
                "evidence.$": "States.JsonMerge($.evidence, States.StringToJson(States.Format('\\{\"attemptNum\": {}, \"ciReasons\": {}\\}', $.attempts.FailureCount,States.JsonToString(States.ArrayUnique($.contraIndicators.Payload)))), false)"
              },
              "ResultPath": "$.audit",
              "End": true
            }
          }
        }
      ]
    },
    "Create VC Claim Set": {
      "Type": "Pass",
      "Next": "Sign VC claimsSet",
      "Parameters": {
        "userInfo.$": "$[0].userDetails",
        "nino.$": "$[0].nino.Item.nino.S",
        "audit.$": "$[2].audit",
        "header": {
          "kid.$": "$[0].parameters.verifiableCredentialKmsSigningKeyId",
          "typ": "JWT",
          "alg": "ES256"
        },
        "payload": {
          "jti.$": "States.Format('urn:uuid:{}',States.UUID())",
          "sub.$": "$[0].querySession.subject",
          "iss.$": "$[0].parameters.issuer",
          "nbf.$": "$[1].time.Payload.nbf",
          "exp.$": "$[1].time.Payload.expiry",
          "vc": {
            "type.$": "$[2].vctype.type",
            "@context.$": "$[2].vctype.@context",
            "credentialSubject.$": "$[0].credentialSubject.Payload",
            "evidence.$": "States.Array($[2].evidence)"
          }
        },
        "user.$": "$[0].querySession.userAuditInfo"
      }
    },
    "Sign VC claimsSet": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload": {
          "kid.$": "$.header.kid",
          "header.$": "States.JsonToString($.header)",
          "claimsSet.$": "States.JsonToString($.payload)",
          "govJourneyId.$": "$.user.govuk_signin_journey_id"
        },
        "FunctionName": "${JwtSignerFunction}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Audit Event VC Issued Sent",
      "ResultSelector": {
        "Payload.$": "$.Payload"
      },
      "ResultPath": "$.jwt"
    },
    "Audit Event VC Issued Sent": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "auditPrefix": "${AuditEventPrefix}",
              "user.$": "$.user",
              "nino.$": "$.nino",
              "userInfoEvent.$": "$.userInfo",
              "issuer.$": "$.payload.iss",
              "evidence.$": "States.Array($.audit.evidence)"
            },
            "DetailType": "${AuditEventNameVcIssued}",
            "EventBusName": "${CheckHmrcEventBus}",
            "Source": "${CheckHmrcEventBusSource}"
          }
        ]
      },
      "Next": "Create Signed JWT",
      "ResultPath": null
    },
    "Create Signed JWT": {
      "Type": "Pass",
      "Parameters": {
        "jwt.$": "$.jwt.Payload",
        "user.$": "$.user",
        "issuer.$": "$.payload.iss",
        "httpStatus": 200
      },
      "Next": "Audit Event End Sent"
    },
    "Audit Event End Sent": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "auditPrefix": "${AuditEventPrefix}",
              "user.$": "$.user",
              "issuer.$": "$.issuer"
            },
            "DetailType": "${AuditEventNameEnd}",
            "EventBusName": "${CheckHmrcEventBus}",
            "Source": "${CheckHmrcEventBusSource}"
          }
        ]
      },
      "End": true,
      "ResultPath": null
    }
  }
}
