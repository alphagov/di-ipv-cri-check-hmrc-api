{
  "Comment": "A description of my state machine",
  "StartAt": "Invoke Check Session",
  "States": {
    "Invoke Check Session": {
      "Type": "Task",
      "Next": "Is Session Valid?",
      "Parameters": {
        "StateMachineArn": "${CheckSessionStateMachineArn}",
        "Input.$": "States.JsonToString($)"
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultSelector": {
        "sessionId.$": "$$.Execution.Input.sessionId",
        "session.$": "States.StringToJson($.Output)"
      }
    },
    "Is Session Valid?": {
      "Type": "Choice",
      "Choices": [
        {
          "Not": {
            "Variable": "$.session.status",
            "StringMatches": "SESSION_OK"
          },
          "Next": "Err: Invalid Session"
        }
      ],
      "Default": "Fetch SSM Parameters"
    },
    "Fetch SSM Parameters": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${SsmParametersFunction}",
        "Payload": {
          "parameters.$": "States.Array('/${CommonStackName}/SessionTableName', '/${CommonStackName}/verifiable-credential/issuer')"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Clear Auth Code",
      "ResultPath": "$.parameters",
      "ResultSelector": {
        "SessionTableName.$": "$.Payload[0].Value",
        "Issuer": "$.Payload[1].Value"
      }
    },
    "Clear Auth Code": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName.$": "$.parameters.SessionTableName",
        "Key": {
          "sessionId": {
            "S.$": "$$.Execution.Input.sessionId"
          }
        },
        "UpdateExpression": "SET authorizationCodeExpiryDate = :expiry REMOVE authorizationCode",
        "ExpressionAttributeValues": {
          ":expiry": {
            "N": "0"
          }
        }
      },
      "Next": "Fetch Current Time For Abandoned Event",
      "ResultPath": null
    },
    "Fetch Current Time For Abandoned Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${CurrentTimeFunctionArn}"
      },
      "Next": "Publish Audit Event Abandoned",
      "ResultSelector": {
        "milliseconds.$": "$.Payload.milliseconds",
        "seconds.$": "$.Payload.seconds"
      },
      "ResultPath": "$.currentTime"
    },
    "Publish Audit Event Abandoned": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "msTimestamp.$": "$.currentTime.milliseconds",
              "sTimestamp.$": "$.currentTime.seconds",
              "session.$": "$.session",
              "issuer.$": "$.parameters.Issuer"
            },
            "DetailType": "${AuditEventNameAbandoned}",
            "EventBusName": "${CheckHmrcEventBus}",
            "Source": "${CheckHmrcEventBusSource}"
          }
        ]
      },
      "Next": "Success",
      "ResultSelector": {}
    },
    "Success": {
      "Type": "Succeed"
    },
    "Err: Invalid Session": {
      "Type": "Pass",
      "End": true,
      "Parameters": {
        "httpStatus": 400
      }
    }
  }
}
