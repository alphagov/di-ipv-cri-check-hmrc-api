{
  "StateMachines": {
    "nino_check": {
      "TestCases": {
        "HappyPathTestNoPreviousAttempt": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Query User Attempts": "DynamoDbQueryNoResult",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Increment user attempt": "DynamoDbQueryNoResult",
          "Person Identity Table Name": "PersonIdentityTableSuccess",
          "Query Session": "QuerySessionSuccess",
          "Get User Agent and API URL": "GetAPIParametersSuccess",
          "Get OAuth Token": "GetOAuthAccessTokenSuccess",
          "Call Matching API": "CallMatchingAPISuccess",
          "Update status to PASS": "UpdateStatusToPassSuccess",
          "Fetch Auth Code Expiry": "FetchAuthCodeExpirySuccess",
          "Fetch Session Table Name": "FetchSessionTableNameSuccess",
          "Set Auth Code for Session": "SetAuthCodeSuccess",
          "Save NINO & sessionId to nino-users table": "SaveNinoSuccess"
        },
        "HappyPathTestOn2ndAttempt": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Query User Attempts": "QueryUserAttemptSuccessOn2ndTry",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Increment user attempt": "DynamoDbQueryNoResult",
          "Person Identity Table Name": "PersonIdentityTableSuccess",
          "Query Session": "QuerySessionSuccess",
          "Get User Agent and API URL": "GetAPIParametersSuccess",
          "Get OAuth Token": "GetOAuthAccessTokenSuccess",
          "Call Matching API": "CallMatchingAPISuccess",
          "Update status to PASS": "UpdateStatusToPassSuccess",
          "Fetch Auth Code Expiry": "FetchAuthCodeExpirySuccess",
          "Fetch Session Table Name": "FetchSessionTableNameSuccess",
          "Set Auth Code for Session": "SetAuthCodeSuccess",
          "Save NINO & sessionId to nino-users table": "SaveNinoSuccess"
        },
        "InValidRequestSessionId": {
          "Invoke Check Session": "CheckSessionFailure"
        },
        "MaximumNumberOfAttemptsExceeded": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Query User Attempts": "QueryUserAttemptFailureAfterMoreThanTwoAttempts"
        },
        "ErrorSavingInNinoDB": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Query User Attempts": "QueryUserAttemptSuccessOn2ndTry",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Increment user attempt": "DynamoDbQueryNoResult",
          "Person Identity Table Name": "PersonIdentityTableSuccess",
          "Query Session": "QuerySessionSuccess",
          "Get User Agent and API URL": "GetAPIParametersSuccess",
          "Get OAuth Token": "GetOAuthAccessTokenSuccess",
          "Call Matching API": "CallMatchingAPISuccess",
          "Update status to PASS": "UpdateStatusToPassSuccess",
          "Fetch Auth Code Expiry": "FetchAuthCodeExpirySuccess",
          "Fetch Session Table Name": "FetchSessionTableNameSuccess",
          "Set Auth Code for Session": "SetAuthCodeSuccess",
          "Save NINO & sessionId to nino-users table": "SaveNinoFailure"
        },
        "UserNotFoundForGivenNino": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Query User Attempts": "DynamoDbQueryNoResult",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Increment user attempt": "DynamoDbQueryNoResult",
          "Person Identity Table Name": "PersonIdentityTableSuccess",
          "Query Session": "DynamoDbQueryNoResult"
        },
        "HMRCAuthError": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Query User Attempts": "DynamoDbQueryNoResult",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Increment user attempt": "DynamoDbQueryNoResult",
          "Person Identity Table Name": "PersonIdentityTableSuccess",
          "Query Session": "QuerySessionSuccess",
          "Get User Agent and API URL": "GetAPIParametersSuccess",
          "Get OAuth Token": "GetOAuthAccessTokenSuccess",
          "Call Matching API": "CallMatchingAPIFailAuth"
        },
        "MatchingLambdaException": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Query User Attempts": "QueryUserAttemptSuccessOn2ndTry",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Increment user attempt": "DynamoDbQueryNoResult",
          "Person Identity Table Name": "PersonIdentityTableSuccess",
          "Query Session": "QuerySessionSuccess",
          "Get User Agent and API URL": "GetAPIParametersSuccess",
          "Get OAuth Token": "GetOAuthAccessTokenSuccess",
          "Call Matching API": "CallMatchingAPIInvalidURL"
        },
        "HMRCError": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Query User Attempts": "QueryUserAttemptSuccessOn2ndTry",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Increment user attempt": "DynamoDbQueryNoResult",
          "Person Identity Table Name": "PersonIdentityTableSuccess",
          "Query Session": "QuerySessionSuccess",
          "Get User Agent and API URL": "GetAPIParametersSuccess",
          "Get OAuth Token": "GetOAuthAccessTokenSuccess",
          "Call Matching API": "CallMatchingAPIFailNoRecords"
        }
      }
    }
  },

  "MockedResponses": {
    "CheckSessionSuccess": {
      "0": {
        "Return": {
          "Payload": "{\"status\":\"SESSION_OK\"}"
        }
      }
    },
    "CheckSessionFailure": {
      "0": {
        "Return": {
          "Payload": "{\"status\":\"SESSION_NOT_FOUND\"}"
        }
      }
    },
    "CallMatchingAPIFailAuth": {
      "0": {
        "Return": {
          "Payload": {
            "code": "INVALID_CREDENTIALS",
            "message": "Invalid Authentication information provided"
          }
        }
      }
    },
    "CallMatchingAPIFailNoRecords": {
      "0": {
        "Return": {
          "Payload": {
            "errors": "CID returned no record"
          }
        }
      }
    },
    "QuerySessionSuccess": {
      "0": {
        "Return": {
          "Count": 1,
          "Items": [
            {
              "expiryDate": {
                "N": "7200"
              },
              "addresses": {
                "L": [
                  {
                    "M": {
                      "addressCountry": {
                        "S": "GB"
                      },
                      "departmentName": {
                        "Nul": true
                      },
                      "uprn": {
                        "N": "100120012077"
                      },
                      "postalCode": {
                        "S": "BA2 5AA"
                      },
                      "validFrom": {
                        "S": "2000-01-01"
                      },
                      "subBuildingName": {
                        "S": ""
                      },
                      "buildingName": {
                        "S": ""
                      },
                      "organisationName": {
                        "Nul": true
                      },
                      "streetName": {
                        "S": "HADLEY ROAD"
                      },
                      "dependentStreetName": {
                        "Nul": true
                      },
                      "buildingNumber": {
                        "S": "8"
                      },
                      "validUntil": {
                        "Nul": true
                      },
                      "addressLocality": {
                        "S": "BATH"
                      },
                      "dependentAddressLocality": {
                        "Nul": true
                      },
                      "doubleDependentAddressLocality": {
                        "Nul": true
                      }
                    }
                  }
                ]
              },
              "names": {
                "L": [
                  {
                    "M": {
                      "nameParts": {
                        "L": [
                          {
                            "M": {
                              "type": {
                                "S": "GivenName"
                              },
                              "value": {
                                "S": "Jim"
                              }
                            }
                          },
                          {
                            "M": {
                              "type": {
                                "S": "FamilyName"
                              },
                              "value": {
                                "S": "Ferguson"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              "sessionId": {
                "S": "abc"
              },
              "birthDates": {
                "L": [
                  {
                    "M": {
                      "value": {
                        "S": "1948-04-23"
                      }
                    }
                  }
                ]
              },
              "nino": {
                "S": "AA000003D"
              }
            }
          ],
          "ScannedCount": 1
        }
      }
    },
    "PersonIdentityTableSuccess": {
      "0": {
        "Return": {
          "Parameter": {
            "Arn": "arn:aws:ssm:eu-west-2:404250751813:parameter/common-cri-api/PersonIdentityTableName",
            "DataType": "text",
            "LastModifiedDate": "2023-08-29T14:13:17.310Z",
            "Name": "/common-cri-api/PersonIdentityTableName",
            "Type": "String",
            "Value": "person-identity-common-cri-api",
            "Version": 1
          }
        }
      }
    },
    "GetAPIParametersSuccess": {
      "0": {
        "Return": {
          "InvalidParameters": [],
          "Parameters": [
            {
              "Arn": "arn:aws:ssm:eu-west-2:404250751813:parameter/pdv-matching/NinoCheckUrl",
              "DataType": "text",
              "LastModifiedDate": "2023-09-19T18:10:35.937Z",
              "Name": "/pdv-matching/NinoCheckUrl",
              "Type": "String",
              "Value": "https://test-api.service.hmrc.gov.uk/individuals/authentication/authenticator/api/match",
              "Version": 1
            },
            {
              "Arn": "arn:aws:ssm:eu-west-2:404250751813:parameter/pdv-matching/UserAgent",
              "DataType": "text",
              "LastModifiedDate": "2023-09-19T18:10:36.048Z",
              "Name": "/pdv-matching/UserAgent",
              "Type": "String",
              "Value": "govuk-one-login",
              "Version": 1
            }
          ]
        }
      }
    },
    "SaveNinoSuccess": {
      "0": {
        "Return": {}
      }
    },
    "SaveNinoFailure": {
      "0": {
        "Return": {
          "Error": "DynamoDB.ConditionalCheckFailedException",
          "Cause": "The conditional request failed (Service: AmazonDynamoDBv2; Status Code: 400; Error Code: ConditionalCheckFailedException; Request ID: GLFM5VOVLKH9CS8PELO5C6DUHNVV4KQNSO5AEMVJF66Q9ASUAAJG; Proxy: null)"
        }
      }
    },
    "UpdateStatusToPassSuccess": {
      "0": {
        "Return": {
          "SdkHttpMetadata": {
            "AllHttpHeaders": {
              "Server": ["Server"],
              "Connection": ["keep-alive"],
              "x-amzn-RequestId": [""],
              "x-amz-crc32": ["2745614147"],
              "Content-Length": ["2"],
              "Date": ["Mon, 18 Sep 2023 12:50:38 GMT"],
              "Content-Type": ["application/x-amz-json-1.0"]
            },
            "HttpHeaders": {
              "Connection": "keep-alive",
              "Content-Length": "2",
              "Content-Type": "application/x-amz-json-1.0",
              "Date": "Mon, 18 Sep 2023 12:50:38 GMT",
              "Server": "Server",
              "x-amz-crc32": "2745614147",
              "x-amzn-RequestId": ""
            },
            "HttpStatusCode": 200
          },
          "SdkResponseMetadata": {
            "RequestId": ""
          }
        }
      }
    },
    "FetchAuthCodeExpirySuccess": {
      "0": {
        "Return": {
          "Payload": {
            "authCodeExpiry": 1695042038
          }
        }
      }
    },
    "FetchSessionTableNameSuccess": {
      "0": {
        "Return": {
          "Parameter": {
            "Arn": "arn:aws:ssm:eu-west-2:404250751813:parameter/common-cri-api/SessionTableName",
            "DataType": "text",
            "LastModifiedDate": "2023-08-29T14:13:17.134Z",
            "Name": "/common-cri-api/SessionTableName",
            "Type": "String",
            "Value": "session-common-cri-api",
            "Version": 1
          }
        }
      }
    },
    "SetAuthCodeSuccess": {
      "0": {
        "Return": {
          "SdkHttpMetadata": {
            "AllHttpHeaders": {
              "Server": ["Server"],
              "Connection": ["keep-alive"],
              "x-amzn-RequestId": [""],
              "x-amz-crc32": ["2745614147"],
              "Content-Length": ["2"],
              "Date": ["Mon, 18 Sep 2023 12:50:38 GMT"],
              "Content-Type": ["application/x-amz-json-1.0"]
            },
            "HttpHeaders": {
              "Connection": "keep-alive",
              "Content-Length": "2",
              "Content-Type": "application/x-amz-json-1.0",
              "Date": "Mon, 18 Sep 2023 12:50:38 GMT",
              "Server": "Server",
              "x-amz-crc32": "2745614147",
              "x-amzn-RequestId": ""
            },
            "HttpStatusCode": 200
          },
          "SdkResponseMetadata": {
            "RequestId": ""
          }
        }
      }
    },
    "DynamoDbQueryNoResult": {
      "0": {
        "Return": {
          "Count": 0,
          "Items": [],
          "ScannedCount": 0
        }
      }
    },
    "QueryUserAttemptSuccessOn2ndTry": {
      "0": {
        "Return": {
          "Count": 1,
          "Items": [
            {
              "id": {
                "S": "12345"
              },
              "attempts": {
                "N": "1"
              }
            }
          ],
          "ScannedCount": 1
        }
      }
    },
    "QueryUserAttemptFailureAfterMoreThanTwoAttempts": {
      "0": {
        "Return": {
          "Count": 1,
          "Items": [
            {
              "id": {
                "S": "12345"
              },
              "attempts": {
                "N": "2"
              }
            }
          ],
          "ScannedCount": 1
        }
      }
    },
    "GetOAuthAccessTokenSuccess": {
      "0": {
        "Return": {
          "SecretString": "abc"
        }
      }
    },
    "CallMatchingAPISuccess": {
      "0": {
        "Return": {
          "Payload": {
            "firstName": "Jim",
            "lastName": "Ferguson",
            "dateOfBirth": "1948-04-23",
            "nino": "AA000003D"
          }
        }
      }
    },
    "CallMatchingAPIInvalidURL": {
      "0": {
        "Return": {
          "Error": "TypeError",
          "Cause": "{\"errorType\":\"TypeError\",\"errorMessage\":\"Failed to parse URL from bad-url\",\"trace\":[\"TypeError: Failed to parse URL from bad-url\",\"    at Object.fetch (node:internal/deps/undici/undici:11576:11)\",\"    at le.handler (/private/var/folders/kr/xcxbzv7d5nbfvrzcsdwf81j00000gp/T/tmpaetgolsq/src/matching-handler.ts:10:24)\"]}"
        }
      }
    }
  }
}
