{
  "StateMachines": {
    "nino_check": {
      "TestCases": {
        "ShouldSuccessOnLastAttempt": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Fetch SSM Parameters": "FetchSSMParamsSuccess",
          "Query User Attempts": "QueryUserAttemptSuccessOn2ndTry",
          "Query Person Identity Table": "QuerySessionSuccess",
          "Call OTG API": "OTGFunctionSuccess",
          "Audit Event Request Sent": "PublishAuditEventRequestSent",
          "Call Matching API": "CallMatchingDeceasedAPIFail",
          "Store txn": "DynamoDbQueryNoResult",
          "Format txn for audit event": "FormatWithTxn",
          "Audit Event Response Received": "PublishAuditEventResponseReceived",
          "Store Deceased Attempt": "DynamoDbQueryNoResult",
          "Fetch Auth Code Expiry": "FetchAuthCodeExpirySuccess",
          "Set Auth Code for Session": "SetAuthCodeSuccess",
          "Save NINO & sessionId to nino-users table": "SaveNinoSuccess"
        },
        "APIFailRetrySuccessTest": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Fetch SSM Parameters": "FetchSSMParamsSuccess",
          "Query User Attempts": "DynamoDbQueryNoResult",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Query Person Identity Table": "QuerySessionSuccess",
          "Call OTG API": "OTGFunctionSuccess",
          "Audit Event Request Sent": "PublishAuditEventRequestSent",
          "Call Matching API": "CallMatchingAPIRetryThenSuccess",
          "Store txn": "DynamoDbQueryNoResult",
          "Format txn for audit event": "FormatWithTxn",
          "Audit Event Response Received": "PublishAuditEventResponseReceived",
          "Store Successful Attempt": "UpdateStatusToPassSuccess",
          "Fetch Auth Code Expiry": "FetchAuthCodeExpirySuccess",
          "Set Auth Code for Session": "SetAuthCodeSuccess",
          "Save NINO & sessionId to nino-users table": "SaveNinoSuccess"
        },
        "APIFailRetryFailTest": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Fetch SSM Parameters": "FetchSSMParamsSuccess",
          "Query User Attempts": "DynamoDbQueryNoResult",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Query Person Identity Table": "QuerySessionSuccess",
          "Call OTG API": "OTGFunctionSuccess",
          "Audit Event Request Sent": "PublishAuditEventRequestSent",
          "Call Matching API": "CallMatchingAPIRetryThenFail"
        },
        "DeceasedTest": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Fetch SSM Parameters": "FetchSSMParamsSuccess",
          "Query User Attempts": "DynamoDbQueryNoResult",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Query Person Identity Table": "QuerySessionSuccess",
          "Call OTG API": "OTGFunctionSuccess",
          "Audit Event Request Sent": "PublishAuditEventRequestSent",
          "Call Matching API": "CallMatchingDeceasedAPIFail",
          "Store txn": "DynamoDbQueryNoResult",
          "Format txn for audit event": "FormatWithoutTxn",
          "Audit Event Response Received": "PublishAuditEventResponseReceived",
          "Store Deceased Attempt": "DynamoDbQueryNoResult"
        },
        "HappyPathTestNoPreviousAttempt": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Fetch SSM Parameters": "FetchSSMParamsSuccess",
          "Query User Attempts": "DynamoDbQueryNoResult",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Query Person Identity Table": "QuerySessionSuccess",
          "Call OTG API": "OTGFunctionSuccess",
          "Audit Event Request Sent": "PublishAuditEventRequestSent",
          "Call Matching API": "CallMatchingAPISuccess",
          "Store txn": "DynamoDbQueryNoResult",
          "Format txn for audit event": "FormatWithTxn",
          "Audit Event Response Received": "PublishAuditEventResponseReceived",
          "Store Successful Attempt": "UpdateStatusToPassSuccess",
          "Fetch Auth Code Expiry": "FetchAuthCodeExpirySuccess",
          "Set Auth Code for Session": "SetAuthCodeSuccess",
          "Save NINO & sessionId to nino-users table": "SaveNinoSuccess"
        },
        "HappyPathTestOn2ndAttempt": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Fetch SSM Parameters": "FetchSSMParamsSuccess",
          "Query User Attempts": "QueryUserAttemptSuccessOn2ndTry",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Query Person Identity Table": "QuerySessionSuccess",
          "Call OTG API": "OTGFunctionSuccess",
          "Audit Event Request Sent": "PublishAuditEventRequestSent",
          "Call Matching API": "CallMatchingAPISuccess",
          "Store txn": "DynamoDbQueryNoResult",
          "Format txn for audit event": "FormatWithTxn",
          "Audit Event Response Received": "PublishAuditEventResponseReceived",
          "Store Successful Attempt": "UpdateStatusToPassSuccess",
          "Fetch Auth Code Expiry": "FetchAuthCodeExpirySuccess",
          "Set Auth Code for Session": "SetAuthCodeSuccess",
          "Save NINO & sessionId to nino-users table": "SaveNinoSuccess"
        },
        "InValidRequestSessionId": {
          "Invoke Check Session": "CheckSessionFailure"
        },
        "MaximumNumberOfAttemptsExceeded": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Fetch SSM Parameters": "FetchSSMParamsSuccess",
          "Query User Attempts": "QueryUserAttemptFailureAfterMoreThanTwoAttempts"
        },
        "UserNotFoundForGivenNino": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Fetch SSM Parameters": "FetchSSMParamsSuccess",
          "Query User Attempts": "DynamoDbQueryNoResult",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Query Person Identity Table": "DynamoDbQueryNoResult"
        },
        "HMRCAuthError": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Fetch SSM Parameters": "FetchSSMParamsSuccess",
          "Query User Attempts": "DynamoDbQueryNoResult",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Query Person Identity Table": "QuerySessionSuccess",
          "Call OTG API": "OTGFunctionSuccess",
          "Audit Event Request Sent": "PublishAuditEventRequestSent",
          "Call Matching API": "CallMatchingAPIFailAuth",
          "Store txn": "DynamoDbQueryNoResult",
          "Format txn for audit event": "FormatWithoutTxn",
          "Audit Event Response Received": "PublishAuditEventResponseReceived"
        },
        "MatchingLambdaException": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Fetch SSM Parameters": "FetchSSMParamsSuccess",
          "Query User Attempts": "QueryUserAttemptSuccessOn2ndTry",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Query Person Identity Table": "QuerySessionSuccess",
          "Call OTG API": "OTGFunctionSuccess",
          "Audit Event Request Sent": "PublishAuditEventRequestSent",
          "Call Matching API": "CallMatchingAPIInvalidURL",
          "Store txn": "DynamoDbQueryNoResult",
          "Format txn for audit event": "FormatWithoutTxn",
          "Audit Event Response Received": "PublishAuditEventResponseReceived"
        },
        "HMRCError": {
          "Invoke Check Session": "CheckSessionSuccess",
          "Fetch SSM Parameters": "FetchSSMParamsSuccess",
          "Query User Attempts": "DynamoDbQueryNoResult",
          "Create new user attempt": "DynamoDbQueryNoResult",
          "Query Person Identity Table": "QuerySessionSuccess",
          "Call OTG API": "OTGFunctionSuccess",
          "Audit Event Request Sent": "PublishAuditEventRequestSent",
          "Call Matching API": "CallMatchingAPIFailNoRecords",
          "Store txn": "DynamoDbQueryNoResult",
          "Format txn for audit event": "FormatWithoutTxn",
          "Audit Event Response Received": "PublishAuditEventResponseReceived",
          "Store Failed Match Attempt": "DynamoDbQueryNoResult"
        }
      }
    }
  },
  "MockedResponses": {
    "CallMatchingAPIRetryThenSuccess": {
      "0-1": {
        "Throw": {
          "Error": "InternalServerException",
          "Cause": "dummy-cause"
        }
      },
      "2": {
        "Return": {
          "Payload": {
            "status": "200",
            "body": {
              "firstName": "Jim",
              "lastName": "Ferguson",
              "dateOfBirth": "1948-04-23",
              "nino": "AA000003D"
            },
            "txn": "mock-txn"
          }
        }
      }
    },
    "CallMatchingAPIRetryThenFail": {
      "0-3": {
        "Throw": {
          "Error": "InternalServerException",
          "Cause": "dummy-cause"
        }
      }
    },
    "FetchSSMParamsSuccess": {
      "0": {
        "Return": {
          "Payload": [
            {
              "Name": "/common-cri-api/PersonIdentityTableName",
              "Value": "person-identity-common-cri-api"
            },
            {
              "Name": "/check-hmrc-cri-api-suraj-cache/UserAgent",
              "Value": "govuk-one-login"
            },
            {
              "Name": "/common-cri-api/SessionTableName",
              "Value": "session-common-cri-api"
            },
            {
              "Name": "/check-hmrc-cri-api/NinoCheckUrl/ipv-core-stub-aws-prod",
              "Value": "http://imposter-url"
            },
            {
              "Name": "/common-cri-api/SessionTableName",
              "Value": "session-common-cri-api"
            },
            {
              "Name": "/common-cri-api/verifiable-credential/issuer",
              "Value": "https://some.issuer"
            }
          ]
        }
      }
    },
    "CheckSessionSuccess": {
      "0": {
        "Return": {
          "Output": "{\"status\":\"SESSION_OK\",\"userAuditInfo\":{\"govuk_signin_journey_id\":\"252561a2-c6ef-47e7-87ab-93891a2a6a41\",\"user_id\":\"urn:fdc:gov.uk:2022:da580c9d-cdf9-4961-afde-233249db04d2\",\"persistent_session_id\":\"156714ef-f9df-48c2-ada8-540e7bce44f7\",\"session_id\":\"12345\",\"ip_address\":\"51.149.8.29\"},\"clientId\":\"exampleClientId\", \"txmaAuditHeader\": \"test encoded header\"}"
        }
      }
    },
    "CheckSessionFailure": {
      "0": {
        "Return": {
          "Output": "{\"status\": \"SESSION_NOT_FOUND\"}"
        }
      }
    },
    "CallMatchingAPIFailAuth": {
      "0": {
        "Return": {
          "Payload": {
            "status": "400",
            "body": {
              "code": "INVALID_CREDENTIALS",
              "message": "Invalid Authentication information provided"
            },
            "txn": ""
          }
        }
      }
    },
    "CallMatchingAPIFailNoRecords": {
      "0": {
        "Return": {
          "Payload": {
            "status": "401",
            "body": {
              "errors": "CID returned no record"
            },
            "txn": ""
          }
        }
      }
    },
    "QuerySessionSuccess": {
      "0": {
        "Return": {
          "Count": 1,
          "Items": [
            {
              "expiryDate": {
                "N": "7200"
              },
              "addresses": {
                "L": [
                  {
                    "M": {
                      "addressCountry": {
                        "S": "GB"
                      },
                      "departmentName": {
                        "Nul": true
                      },
                      "uprn": {
                        "N": "100120012077"
                      },
                      "postalCode": {
                        "S": "BA2 5AA"
                      },
                      "validFrom": {
                        "S": "2000-01-01"
                      },
                      "subBuildingName": {
                        "S": ""
                      },
                      "buildingName": {
                        "S": ""
                      },
                      "organisationName": {
                        "Nul": true
                      },
                      "streetName": {
                        "S": "HADLEY ROAD"
                      },
                      "dependentStreetName": {
                        "Nul": true
                      },
                      "buildingNumber": {
                        "S": "8"
                      },
                      "validUntil": {
                        "Nul": true
                      },
                      "addressLocality": {
                        "S": "BATH"
                      },
                      "dependentAddressLocality": {
                        "Nul": true
                      },
                      "doubleDependentAddressLocality": {
                        "Nul": true
                      }
                    }
                  }
                ]
              },
              "names": {
                "L": [
                  {
                    "M": {
                      "nameParts": {
                        "L": [
                          {
                            "M": {
                              "type": {
                                "S": "GivenName"
                              },
                              "value": {
                                "S": "Jim"
                              }
                            }
                          },
                          {
                            "M": {
                              "type": {
                                "S": "FamilyName"
                              },
                              "value": {
                                "S": "Ferguson"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              "sessionId": {
                "S": "abc"
              },
              "birthDates": {
                "L": [
                  {
                    "M": {
                      "value": {
                        "S": "1948-04-23"
                      }
                    }
                  }
                ]
              },
              "nino": {
                "S": "AA000003D"
              }
            }
          ],
          "ScannedCount": 1
        }
      }
    },
    "SaveNinoSuccess": {
      "0": {
        "Return": {}
      }
    },
    "SaveNinoFailure": {
      "0": {
        "Return": {
          "Error": "DynamoDB.ConditionalCheckFailedException",
          "Cause": "The conditional request failed (Service: AmazonDynamoDBv2; Status Code: 400; Error Code: ConditionalCheckFailedException; Request ID: GLFM5VOVLKH9CS8PELO5C6DUHNVV4KQNSO5AEMVJF66Q9ASUAAJG; Proxy: null)"
        }
      }
    },
    "UpdateStatusToPassSuccess": {
      "0": {
        "Return": {
          "SdkHttpMetadata": {
            "AllHttpHeaders": {
              "Server": ["Server"],
              "Connection": ["keep-alive"],
              "x-amzn-RequestId": [""],
              "x-amz-crc32": ["2745614147"],
              "Content-Length": ["2"],
              "Date": ["Mon, 18 Sep 2023 12:50:38 GMT"],
              "Content-Type": ["application/x-amz-json-1.0"]
            },
            "HttpHeaders": {
              "Connection": "keep-alive",
              "Content-Length": "2",
              "Content-Type": "application/x-amz-json-1.0",
              "Date": "Mon, 18 Sep 2023 12:50:38 GMT",
              "Server": "Server",
              "x-amz-crc32": "2745614147",
              "x-amzn-RequestId": ""
            },
            "HttpStatusCode": 200
          },
          "SdkResponseMetadata": {
            "RequestId": ""
          }
        }
      }
    },
    "FetchAuthCodeExpirySuccess": {
      "0": {
        "Return": {
          "Payload": {
            "authCodeExpiry": 1695042038
          }
        }
      }
    },
    "SetAuthCodeSuccess": {
      "0": {
        "Return": {
          "SdkHttpMetadata": {
            "AllHttpHeaders": {
              "Server": ["Server"],
              "Connection": ["keep-alive"],
              "x-amzn-RequestId": [""],
              "x-amz-crc32": ["2745614147"],
              "Content-Length": ["2"],
              "Date": ["Mon, 18 Sep 2023 12:50:38 GMT"],
              "Content-Type": ["application/x-amz-json-1.0"]
            },
            "HttpHeaders": {
              "Connection": "keep-alive",
              "Content-Length": "2",
              "Content-Type": "application/x-amz-json-1.0",
              "Date": "Mon, 18 Sep 2023 12:50:38 GMT",
              "Server": "Server",
              "x-amz-crc32": "2745614147",
              "x-amzn-RequestId": ""
            },
            "HttpStatusCode": 200
          },
          "SdkResponseMetadata": {
            "RequestId": ""
          }
        }
      }
    },
    "DynamoDbQueryNoResult": {
      "0": {
        "Return": {
          "Count": 0,
          "Items": [],
          "ScannedCount": 0
        }
      }
    },
    "PublishAuditEventResponseReceived": {
      "0": {
        "Return": null
      }
    },
    "PublishAuditEventRequestSent": {
      "0": {
        "Return": null
      }
    },
    "QueryUserAttemptSuccessOn2ndTry": {
      "0": {
        "Return": {
          "Count": 1,
          "Items": [
            {
              "id": {
                "S": "12345"
              },
              "attempts": {
                "N": "1"
              }
            }
          ],
          "ScannedCount": 1
        }
      }
    },
    "QueryUserAttemptFailureAfterMoreThanTwoAttempts": {
      "0": {
        "Return": {
          "Count": 2
        }
      }
    },
    "OTGFunctionSuccess": {
      "0": {
        "Return": {
          "Payload": {
            "token": "goodToken",
            "expiry": "123456789"
          }
        }
      }
    },
    "CallMatchingAPISuccess": {
      "0": {
        "Return": {
          "Payload": {
            "status": "200",
            "body": {
              "firstName": "Jim",
              "lastName": "Ferguson",
              "dateOfBirth": "1948-04-23",
              "nino": "AA000003D"
            },
            "txn": "mock-txn"
          }
        }
      }
    },
    "CallMatchingDeceasedAPIFail": {
      "0": {
        "Return": {
          "Payload": {
            "status": "424",
            "body": "Request to create account for a deceased user",
            "txn": ""
          }
        }
      }
    },
    "CallMatchingAPIInvalidURL": {
      "0-3": {
        "Return": {
          "Error": "TypeError",
          "Cause": "{\"errorType\":\"TypeError\",\"errorMessage\":\"Failed to parse URL from bad-url\",\"trace\":[\"TypeError: Failed to parse URL from bad-url\",\"    at Object.fetch (node:internal/deps/undici/undici:11576:11)\",\"    at le.handler (/private/var/folders/kr/xcxbzv7d5nbfvrzcsdwf81j00000gp/T/tmpaetgolsq/src/matching-handler.ts:10:24)\"]}"
        }
      }
    },
    "FormatWithTxn": {
      "0": {
        "Return": {
          "Payload": {
            "audit": {
              "evidence": {
                "txn": "mock-txn"
              }
            }
          }
        }
      }
    },
    "FormatWithoutTxn": {
      "0": {
        "Return": {
          "Payload": {
            "audit": {
              "evidence": {
                "txn": ""
              }
            }
          }
        }
      }
    }
  }
}
